//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `FullPoseEstimationMulti.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __FullPoseEstimationMulti_h__
#define __FullPoseEstimationMulti_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompFullPoseEstimationMulti
{

class FullPoseEstimationMulti;
class FullPoseEstimationMultiPrx;

}

namespace RoboCompFullPoseEstimationMulti
{

class HardwareFailedException : public ::Ice::UserExceptionHelper<HardwareFailedException, ::Ice::UserException>
{
public:

    virtual ~HardwareFailedException();

    HardwareFailedException(const HardwareFailedException&) = default;

    HardwareFailedException() = default;

    /**
     * One-shot constructor to initialize all data members.
     */
    HardwareFailedException(const ::std::string& what) :
        what(::std::move(what))
    {
    }

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    ::std::string what;
};

/// \cond INTERNAL
static HardwareFailedException _iceS_HardwareFailedException_init;
/// \endcond

struct FullPoseMatrix
{
    ::std::string source;
    float m00;
    float m01;
    float m02;
    float m03;
    float m10;
    float m11;
    float m12;
    float m13;
    float m20;
    float m21;
    float m22;
    float m23;
    float m30;
    float m31;
    float m32;
    float m33;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(source, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
    }
};

struct FullPoseEuler
{
    ::std::string source;
    float x;
    float y;
    float z;
    float rx;
    float ry;
    float rz;
    float vx;
    float vy;
    float vz;
    float vrx;
    float vry;
    float vrz;
    int confidence;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const int&> ice_tuple() const
    {
        return std::tie(source, x, y, z, rx, ry, rz, vx, vy, vz, vrx, vry, vrz, confidence);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompFullPoseEstimationMulti
{

class FullPoseEstimationMulti : public virtual ::Ice::Object
{
public:

    using ProxyType = FullPoseEstimationMultiPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual FullPoseEuler getFullPoseEuler(int robotid, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getFullPoseEuler(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual FullPoseMatrix getFullPoseMatrix(int robotid, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getFullPoseMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setInitialPose(int robotid, float x, float y, float z, float rx, float ry, float rz, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setInitialPose(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompFullPoseEstimationMulti
{

class FullPoseEstimationMultiPrx : public virtual ::Ice::Proxy<FullPoseEstimationMultiPrx, ::Ice::ObjectPrx>
{
public:

    FullPoseEuler getFullPoseEuler(int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompFullPoseEstimationMulti::FullPoseEuler>(true, this, &FullPoseEstimationMultiPrx::_iceI_getFullPoseEuler, robotid, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getFullPoseEulerAsync(int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompFullPoseEstimationMulti::FullPoseEuler>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompFullPoseEstimationMulti::FullPoseEuler, P>(false, this, &FullPoseEstimationMultiPrx::_iceI_getFullPoseEuler, robotid, context);
    }

    ::std::function<void()>
    getFullPoseEulerAsync(int robotid,
                          ::std::function<void(::RoboCompFullPoseEstimationMulti::FullPoseEuler)> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompFullPoseEstimationMulti::FullPoseEuler>(response, ex, sent, this, &RoboCompFullPoseEstimationMulti::FullPoseEstimationMultiPrx::_iceI_getFullPoseEuler, robotid, context);
    }

    /// \cond INTERNAL
    void _iceI_getFullPoseEuler(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompFullPoseEstimationMulti::FullPoseEuler>>&, int, const ::Ice::Context&);
    /// \endcond

    FullPoseMatrix getFullPoseMatrix(int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompFullPoseEstimationMulti::FullPoseMatrix>(true, this, &FullPoseEstimationMultiPrx::_iceI_getFullPoseMatrix, robotid, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getFullPoseMatrixAsync(int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompFullPoseEstimationMulti::FullPoseMatrix>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompFullPoseEstimationMulti::FullPoseMatrix, P>(false, this, &FullPoseEstimationMultiPrx::_iceI_getFullPoseMatrix, robotid, context);
    }

    ::std::function<void()>
    getFullPoseMatrixAsync(int robotid,
                           ::std::function<void(::RoboCompFullPoseEstimationMulti::FullPoseMatrix)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompFullPoseEstimationMulti::FullPoseMatrix>(response, ex, sent, this, &RoboCompFullPoseEstimationMulti::FullPoseEstimationMultiPrx::_iceI_getFullPoseMatrix, robotid, context);
    }

    /// \cond INTERNAL
    void _iceI_getFullPoseMatrix(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompFullPoseEstimationMulti::FullPoseMatrix>>&, int, const ::Ice::Context&);
    /// \endcond

    void setInitialPose(int robotid, float x, float y, float z, float rx, float ry, float rz, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &FullPoseEstimationMultiPrx::_iceI_setInitialPose, robotid, x, y, z, rx, ry, rz, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setInitialPoseAsync(int robotid, float x, float y, float z, float rx, float ry, float rz, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &FullPoseEstimationMultiPrx::_iceI_setInitialPose, robotid, x, y, z, rx, ry, rz, context);
    }

    ::std::function<void()>
    setInitialPoseAsync(int robotid, float x, float y, float z, float rx, float ry, float rz,
                        ::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompFullPoseEstimationMulti::FullPoseEstimationMultiPrx::_iceI_setInitialPose, robotid, x, y, z, rx, ry, rz, context);
    }

    /// \cond INTERNAL
    void _iceI_setInitialPose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, float, float, float, float, float, float, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    FullPoseEstimationMultiPrx() = default;
    friend ::std::shared_ptr<FullPoseEstimationMultiPrx> IceInternal::createProxy<FullPoseEstimationMultiPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<typename S>
struct StreamReader<::RoboCompFullPoseEstimationMulti::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompFullPoseEstimationMulti::HardwareFailedException& v)
    {
        istr->readAll(v.what);
    }
};

template<>
struct StreamableTraits<::RoboCompFullPoseEstimationMulti::FullPoseMatrix>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 65;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompFullPoseEstimationMulti::FullPoseMatrix, S>
{
    static void read(S* istr, ::RoboCompFullPoseEstimationMulti::FullPoseMatrix& v)
    {
        istr->readAll(v.source, v.m00, v.m01, v.m02, v.m03, v.m10, v.m11, v.m12, v.m13, v.m20, v.m21, v.m22, v.m23, v.m30, v.m31, v.m32, v.m33);
    }
};

template<>
struct StreamableTraits<::RoboCompFullPoseEstimationMulti::FullPoseEuler>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 53;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompFullPoseEstimationMulti::FullPoseEuler, S>
{
    static void read(S* istr, ::RoboCompFullPoseEstimationMulti::FullPoseEuler& v)
    {
        istr->readAll(v.source, v.x, v.y, v.z, v.rx, v.ry, v.rz, v.vx, v.vy, v.vz, v.vrx, v.vry, v.vrz, v.confidence);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompFullPoseEstimationMulti
{

using FullPoseEstimationMultiPtr = ::std::shared_ptr<FullPoseEstimationMulti>;
using FullPoseEstimationMultiPrxPtr = ::std::shared_ptr<FullPoseEstimationMultiPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompFullPoseEstimationMulti
{

class FullPoseEstimationMulti;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< FullPoseEstimationMulti>&);
::IceProxy::Ice::Object* upCast(FullPoseEstimationMulti*);
/// \endcond

}

}

namespace RoboCompFullPoseEstimationMulti
{

class FullPoseEstimationMulti;
/// \cond INTERNAL
::Ice::Object* upCast(FullPoseEstimationMulti*);
/// \endcond
typedef ::IceInternal::Handle< FullPoseEstimationMulti> FullPoseEstimationMultiPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti> FullPoseEstimationMultiPrx;
typedef FullPoseEstimationMultiPrx FullPoseEstimationMultiPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(FullPoseEstimationMultiPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompFullPoseEstimationMulti
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    /**
     * One-shot constructor to initialize all data members.
     */
    explicit HardwareFailedException(const ::std::string& what);
    virtual ~HardwareFailedException() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual HardwareFailedException* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

    ::std::string what;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static HardwareFailedException _iceS_HardwareFailedException_init;
/// \endcond

struct FullPoseMatrix
{
    ::std::string source;
    ::Ice::Float m00;
    ::Ice::Float m01;
    ::Ice::Float m02;
    ::Ice::Float m03;
    ::Ice::Float m10;
    ::Ice::Float m11;
    ::Ice::Float m12;
    ::Ice::Float m13;
    ::Ice::Float m20;
    ::Ice::Float m21;
    ::Ice::Float m22;
    ::Ice::Float m23;
    ::Ice::Float m30;
    ::Ice::Float m31;
    ::Ice::Float m32;
    ::Ice::Float m33;
};

struct FullPoseEuler
{
    ::std::string source;
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Float rx;
    ::Ice::Float ry;
    ::Ice::Float rz;
    ::Ice::Float vx;
    ::Ice::Float vy;
    ::Ice::Float vz;
    ::Ice::Float vrx;
    ::Ice::Float vry;
    ::Ice::Float vrz;
    ::Ice::Int confidence;
};

}

namespace RoboCompFullPoseEstimationMulti
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseEuler.
 * Create a wrapper instance by calling ::RoboCompFullPoseEstimationMulti::newCallback_FullPoseEstimationMulti_getFullPoseEuler.
 */
class Callback_FullPoseEstimationMulti_getFullPoseEuler_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FullPoseEstimationMulti_getFullPoseEuler_Base> Callback_FullPoseEstimationMulti_getFullPoseEulerPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseMatrix.
 * Create a wrapper instance by calling ::RoboCompFullPoseEstimationMulti::newCallback_FullPoseEstimationMulti_getFullPoseMatrix.
 */
class Callback_FullPoseEstimationMulti_getFullPoseMatrix_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FullPoseEstimationMulti_getFullPoseMatrix_Base> Callback_FullPoseEstimationMulti_getFullPoseMatrixPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_setInitialPose.
 * Create a wrapper instance by calling ::RoboCompFullPoseEstimationMulti::newCallback_FullPoseEstimationMulti_setInitialPose.
 */
class Callback_FullPoseEstimationMulti_setInitialPose_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FullPoseEstimationMulti_setInitialPose_Base> Callback_FullPoseEstimationMulti_setInitialPosePtr;

}

namespace IceProxy
{

namespace RoboCompFullPoseEstimationMulti
{

class FullPoseEstimationMulti : public virtual ::Ice::Proxy<FullPoseEstimationMulti, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompFullPoseEstimationMulti::FullPoseEuler getFullPoseEuler(::Ice::Int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getFullPoseEuler(_iceI_begin_getFullPoseEuler(robotid, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getFullPoseEuler(::Ice::Int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getFullPoseEuler(robotid, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseEuler(::Ice::Int robotid, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseEuler(robotid, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseEuler(::Ice::Int robotid, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseEuler(robotid, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseEuler(::Ice::Int robotid, const ::RoboCompFullPoseEstimationMulti::Callback_FullPoseEstimationMulti_getFullPoseEulerPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseEuler(robotid, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseEuler(::Ice::Int robotid, const ::Ice::Context& context, const ::RoboCompFullPoseEstimationMulti::Callback_FullPoseEstimationMulti_getFullPoseEulerPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseEuler(robotid, context, cb, cookie);
    }

    ::RoboCompFullPoseEstimationMulti::FullPoseEuler end_getFullPoseEuler(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getFullPoseEuler(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompFullPoseEstimationMulti::FullPoseMatrix getFullPoseMatrix(::Ice::Int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getFullPoseMatrix(_iceI_begin_getFullPoseMatrix(robotid, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getFullPoseMatrix(::Ice::Int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getFullPoseMatrix(robotid, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseMatrix(::Ice::Int robotid, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseMatrix(robotid, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseMatrix(::Ice::Int robotid, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseMatrix(robotid, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseMatrix(::Ice::Int robotid, const ::RoboCompFullPoseEstimationMulti::Callback_FullPoseEstimationMulti_getFullPoseMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseMatrix(robotid, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFullPoseMatrix(::Ice::Int robotid, const ::Ice::Context& context, const ::RoboCompFullPoseEstimationMulti::Callback_FullPoseEstimationMulti_getFullPoseMatrixPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFullPoseMatrix(robotid, context, cb, cookie);
    }

    ::RoboCompFullPoseEstimationMulti::FullPoseMatrix end_getFullPoseMatrix(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getFullPoseMatrix(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, ::Ice::Float z, ::Ice::Float rx, ::Ice::Float ry, ::Ice::Float rz, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setInitialPose(_iceI_begin_setInitialPose(robotid, x, y, z, rx, ry, rz, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, ::Ice::Float z, ::Ice::Float rx, ::Ice::Float ry, ::Ice::Float rz, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setInitialPose(robotid, x, y, z, rx, ry, rz, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, ::Ice::Float z, ::Ice::Float rx, ::Ice::Float ry, ::Ice::Float rz, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setInitialPose(robotid, x, y, z, rx, ry, rz, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, ::Ice::Float z, ::Ice::Float rx, ::Ice::Float ry, ::Ice::Float rz, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setInitialPose(robotid, x, y, z, rx, ry, rz, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, ::Ice::Float z, ::Ice::Float rx, ::Ice::Float ry, ::Ice::Float rz, const ::RoboCompFullPoseEstimationMulti::Callback_FullPoseEstimationMulti_setInitialPosePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setInitialPose(robotid, x, y, z, rx, ry, rz, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, ::Ice::Float z, ::Ice::Float rx, ::Ice::Float ry, ::Ice::Float rz, const ::Ice::Context& context, const ::RoboCompFullPoseEstimationMulti::Callback_FullPoseEstimationMulti_setInitialPosePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setInitialPose(robotid, x, y, z, rx, ry, rz, context, cb, cookie);
    }

    void end_setInitialPose(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setInitialPose(::Ice::Int, ::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompFullPoseEstimationMulti
{

class FullPoseEstimationMulti : public virtual ::Ice::Object
{
public:

    typedef FullPoseEstimationMultiPrx ProxyType;
    typedef FullPoseEstimationMultiPtr PointerType;

    virtual ~FullPoseEstimationMulti();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual FullPoseEuler getFullPoseEuler(::Ice::Int robotid, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getFullPoseEuler(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual FullPoseMatrix getFullPoseMatrix(::Ice::Int robotid, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getFullPoseMatrix(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, ::Ice::Float z, ::Ice::Float rx, ::Ice::Float ry, ::Ice::Float rz, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setInitialPose(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const FullPoseEstimationMulti& lhs, const FullPoseEstimationMulti& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const FullPoseEstimationMulti& lhs, const FullPoseEstimationMulti& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompFullPoseEstimationMulti::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompFullPoseEstimationMulti::HardwareFailedException, S>
{
    static void write(S* ostr, const ::RoboCompFullPoseEstimationMulti::HardwareFailedException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompFullPoseEstimationMulti::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompFullPoseEstimationMulti::HardwareFailedException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompFullPoseEstimationMulti::FullPoseMatrix>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 65;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompFullPoseEstimationMulti::FullPoseMatrix, S>
{
    static void write(S* ostr, const ::RoboCompFullPoseEstimationMulti::FullPoseMatrix& v)
    {
        ostr->write(v.source);
        ostr->write(v.m00);
        ostr->write(v.m01);
        ostr->write(v.m02);
        ostr->write(v.m03);
        ostr->write(v.m10);
        ostr->write(v.m11);
        ostr->write(v.m12);
        ostr->write(v.m13);
        ostr->write(v.m20);
        ostr->write(v.m21);
        ostr->write(v.m22);
        ostr->write(v.m23);
        ostr->write(v.m30);
        ostr->write(v.m31);
        ostr->write(v.m32);
        ostr->write(v.m33);
    }
};

template<typename S>
struct StreamReader< ::RoboCompFullPoseEstimationMulti::FullPoseMatrix, S>
{
    static void read(S* istr, ::RoboCompFullPoseEstimationMulti::FullPoseMatrix& v)
    {
        istr->read(v.source);
        istr->read(v.m00);
        istr->read(v.m01);
        istr->read(v.m02);
        istr->read(v.m03);
        istr->read(v.m10);
        istr->read(v.m11);
        istr->read(v.m12);
        istr->read(v.m13);
        istr->read(v.m20);
        istr->read(v.m21);
        istr->read(v.m22);
        istr->read(v.m23);
        istr->read(v.m30);
        istr->read(v.m31);
        istr->read(v.m32);
        istr->read(v.m33);
    }
};

template<>
struct StreamableTraits< ::RoboCompFullPoseEstimationMulti::FullPoseEuler>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 53;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompFullPoseEstimationMulti::FullPoseEuler, S>
{
    static void write(S* ostr, const ::RoboCompFullPoseEstimationMulti::FullPoseEuler& v)
    {
        ostr->write(v.source);
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.rx);
        ostr->write(v.ry);
        ostr->write(v.rz);
        ostr->write(v.vx);
        ostr->write(v.vy);
        ostr->write(v.vz);
        ostr->write(v.vrx);
        ostr->write(v.vry);
        ostr->write(v.vrz);
        ostr->write(v.confidence);
    }
};

template<typename S>
struct StreamReader< ::RoboCompFullPoseEstimationMulti::FullPoseEuler, S>
{
    static void read(S* istr, ::RoboCompFullPoseEstimationMulti::FullPoseEuler& v)
    {
        istr->read(v.source);
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.rx);
        istr->read(v.ry);
        istr->read(v.rz);
        istr->read(v.vx);
        istr->read(v.vy);
        istr->read(v.vz);
        istr->read(v.vrx);
        istr->read(v.vry);
        istr->read(v.vrz);
        istr->read(v.confidence);
    }
};

}
/// \endcond

namespace RoboCompFullPoseEstimationMulti
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseEuler.
 * Create a wrapper instance by calling ::RoboCompFullPoseEstimationMulti::newCallback_FullPoseEstimationMulti_getFullPoseEuler.
 */
template<class T>
class CallbackNC_FullPoseEstimationMulti_getFullPoseEuler : public Callback_FullPoseEstimationMulti_getFullPoseEuler_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const FullPoseEuler&);

    CallbackNC_FullPoseEstimationMulti_getFullPoseEuler(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FullPoseEstimationMultiPrx proxy = FullPoseEstimationMultiPrx::uncheckedCast(result->getProxy());
        FullPoseEuler ret;
        try
        {
            ret = proxy->end_getFullPoseEuler(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseEuler.
 */
template<class T> Callback_FullPoseEstimationMulti_getFullPoseEulerPtr
newCallback_FullPoseEstimationMulti_getFullPoseEuler(const IceUtil::Handle<T>& instance, void (T::*cb)(const FullPoseEuler&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FullPoseEstimationMulti_getFullPoseEuler<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseEuler.
 */
template<class T> Callback_FullPoseEstimationMulti_getFullPoseEulerPtr
newCallback_FullPoseEstimationMulti_getFullPoseEuler(T* instance, void (T::*cb)(const FullPoseEuler&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FullPoseEstimationMulti_getFullPoseEuler<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseEuler.
 * Create a wrapper instance by calling ::RoboCompFullPoseEstimationMulti::newCallback_FullPoseEstimationMulti_getFullPoseEuler.
 */
template<class T, typename CT>
class Callback_FullPoseEstimationMulti_getFullPoseEuler : public Callback_FullPoseEstimationMulti_getFullPoseEuler_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const FullPoseEuler&, const CT&);

    Callback_FullPoseEstimationMulti_getFullPoseEuler(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FullPoseEstimationMultiPrx proxy = FullPoseEstimationMultiPrx::uncheckedCast(result->getProxy());
        FullPoseEuler ret;
        try
        {
            ret = proxy->end_getFullPoseEuler(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseEuler.
 */
template<class T, typename CT> Callback_FullPoseEstimationMulti_getFullPoseEulerPtr
newCallback_FullPoseEstimationMulti_getFullPoseEuler(const IceUtil::Handle<T>& instance, void (T::*cb)(const FullPoseEuler&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FullPoseEstimationMulti_getFullPoseEuler<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseEuler.
 */
template<class T, typename CT> Callback_FullPoseEstimationMulti_getFullPoseEulerPtr
newCallback_FullPoseEstimationMulti_getFullPoseEuler(T* instance, void (T::*cb)(const FullPoseEuler&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FullPoseEstimationMulti_getFullPoseEuler<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseMatrix.
 * Create a wrapper instance by calling ::RoboCompFullPoseEstimationMulti::newCallback_FullPoseEstimationMulti_getFullPoseMatrix.
 */
template<class T>
class CallbackNC_FullPoseEstimationMulti_getFullPoseMatrix : public Callback_FullPoseEstimationMulti_getFullPoseMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const FullPoseMatrix&);

    CallbackNC_FullPoseEstimationMulti_getFullPoseMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FullPoseEstimationMultiPrx proxy = FullPoseEstimationMultiPrx::uncheckedCast(result->getProxy());
        FullPoseMatrix ret;
        try
        {
            ret = proxy->end_getFullPoseMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseMatrix.
 */
template<class T> Callback_FullPoseEstimationMulti_getFullPoseMatrixPtr
newCallback_FullPoseEstimationMulti_getFullPoseMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const FullPoseMatrix&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FullPoseEstimationMulti_getFullPoseMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseMatrix.
 */
template<class T> Callback_FullPoseEstimationMulti_getFullPoseMatrixPtr
newCallback_FullPoseEstimationMulti_getFullPoseMatrix(T* instance, void (T::*cb)(const FullPoseMatrix&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FullPoseEstimationMulti_getFullPoseMatrix<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseMatrix.
 * Create a wrapper instance by calling ::RoboCompFullPoseEstimationMulti::newCallback_FullPoseEstimationMulti_getFullPoseMatrix.
 */
template<class T, typename CT>
class Callback_FullPoseEstimationMulti_getFullPoseMatrix : public Callback_FullPoseEstimationMulti_getFullPoseMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const FullPoseMatrix&, const CT&);

    Callback_FullPoseEstimationMulti_getFullPoseMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        FullPoseEstimationMultiPrx proxy = FullPoseEstimationMultiPrx::uncheckedCast(result->getProxy());
        FullPoseMatrix ret;
        try
        {
            ret = proxy->end_getFullPoseMatrix(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseMatrix.
 */
template<class T, typename CT> Callback_FullPoseEstimationMulti_getFullPoseMatrixPtr
newCallback_FullPoseEstimationMulti_getFullPoseMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(const FullPoseMatrix&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FullPoseEstimationMulti_getFullPoseMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_getFullPoseMatrix.
 */
template<class T, typename CT> Callback_FullPoseEstimationMulti_getFullPoseMatrixPtr
newCallback_FullPoseEstimationMulti_getFullPoseMatrix(T* instance, void (T::*cb)(const FullPoseMatrix&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FullPoseEstimationMulti_getFullPoseMatrix<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_setInitialPose.
 * Create a wrapper instance by calling ::RoboCompFullPoseEstimationMulti::newCallback_FullPoseEstimationMulti_setInitialPose.
 */
template<class T>
class CallbackNC_FullPoseEstimationMulti_setInitialPose : public Callback_FullPoseEstimationMulti_setInitialPose_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FullPoseEstimationMulti_setInitialPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_setInitialPose.
 */
template<class T> Callback_FullPoseEstimationMulti_setInitialPosePtr
newCallback_FullPoseEstimationMulti_setInitialPose(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FullPoseEstimationMulti_setInitialPose<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_setInitialPose.
 */
template<class T> Callback_FullPoseEstimationMulti_setInitialPosePtr
newCallback_FullPoseEstimationMulti_setInitialPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FullPoseEstimationMulti_setInitialPose<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_setInitialPose.
 */
template<class T> Callback_FullPoseEstimationMulti_setInitialPosePtr
newCallback_FullPoseEstimationMulti_setInitialPose(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FullPoseEstimationMulti_setInitialPose<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_setInitialPose.
 */
template<class T> Callback_FullPoseEstimationMulti_setInitialPosePtr
newCallback_FullPoseEstimationMulti_setInitialPose(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FullPoseEstimationMulti_setInitialPose<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_setInitialPose.
 * Create a wrapper instance by calling ::RoboCompFullPoseEstimationMulti::newCallback_FullPoseEstimationMulti_setInitialPose.
 */
template<class T, typename CT>
class Callback_FullPoseEstimationMulti_setInitialPose : public Callback_FullPoseEstimationMulti_setInitialPose_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FullPoseEstimationMulti_setInitialPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_setInitialPose.
 */
template<class T, typename CT> Callback_FullPoseEstimationMulti_setInitialPosePtr
newCallback_FullPoseEstimationMulti_setInitialPose(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FullPoseEstimationMulti_setInitialPose<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_setInitialPose.
 */
template<class T, typename CT> Callback_FullPoseEstimationMulti_setInitialPosePtr
newCallback_FullPoseEstimationMulti_setInitialPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FullPoseEstimationMulti_setInitialPose<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_setInitialPose.
 */
template<class T, typename CT> Callback_FullPoseEstimationMulti_setInitialPosePtr
newCallback_FullPoseEstimationMulti_setInitialPose(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FullPoseEstimationMulti_setInitialPose<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompFullPoseEstimationMulti::FullPoseEstimationMulti::begin_setInitialPose.
 */
template<class T, typename CT> Callback_FullPoseEstimationMulti_setInitialPosePtr
newCallback_FullPoseEstimationMulti_setInitialPose(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FullPoseEstimationMulti_setInitialPose<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
