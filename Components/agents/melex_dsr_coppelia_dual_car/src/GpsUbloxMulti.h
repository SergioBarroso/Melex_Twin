//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `GpsUbloxMulti.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __GpsUbloxMulti_h__
#define __GpsUbloxMulti_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompGpsUbloxMulti
{

class GpsUbloxMulti;
class GpsUbloxMultiPrx;

}

namespace RoboCompGpsUbloxMulti
{

struct DatosGPS
{
    float latitude;
    float longitude;
    float altitude;
    float UTMx;
    float UTMy;
    float mapx;
    float mapy;
    float azimut;
    float rot;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(latitude, longitude, altitude, UTMx, UTMy, mapx, mapy, azimut, rot);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompGpsUbloxMulti
{

class GpsUbloxMulti : public virtual ::Ice::Object
{
public:

    using ProxyType = GpsUbloxMultiPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual DatosGPS getData(int robotid, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setInitialPose(int robotid, float x, float y, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setInitialPose(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompGpsUbloxMulti
{

class GpsUbloxMultiPrx : public virtual ::Ice::Proxy<GpsUbloxMultiPrx, ::Ice::ObjectPrx>
{
public:

    DatosGPS getData(int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompGpsUbloxMulti::DatosGPS>(true, this, &GpsUbloxMultiPrx::_iceI_getData, robotid, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getDataAsync(int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompGpsUbloxMulti::DatosGPS>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompGpsUbloxMulti::DatosGPS, P>(false, this, &GpsUbloxMultiPrx::_iceI_getData, robotid, context);
    }

    ::std::function<void()>
    getDataAsync(int robotid,
                 ::std::function<void(::RoboCompGpsUbloxMulti::DatosGPS)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompGpsUbloxMulti::DatosGPS>(response, ex, sent, this, &RoboCompGpsUbloxMulti::GpsUbloxMultiPrx::_iceI_getData, robotid, context);
    }

    /// \cond INTERNAL
    void _iceI_getData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompGpsUbloxMulti::DatosGPS>>&, int, const ::Ice::Context&);
    /// \endcond

    void setInitialPose(int robotid, float x, float y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &GpsUbloxMultiPrx::_iceI_setInitialPose, robotid, x, y, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setInitialPoseAsync(int robotid, float x, float y, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &GpsUbloxMultiPrx::_iceI_setInitialPose, robotid, x, y, context);
    }

    ::std::function<void()>
    setInitialPoseAsync(int robotid, float x, float y,
                        ::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompGpsUbloxMulti::GpsUbloxMultiPrx::_iceI_setInitialPose, robotid, x, y, context);
    }

    /// \cond INTERNAL
    void _iceI_setInitialPose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, float, float, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    GpsUbloxMultiPrx() = default;
    friend ::std::shared_ptr<GpsUbloxMultiPrx> IceInternal::createProxy<GpsUbloxMultiPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompGpsUbloxMulti::DatosGPS>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 36;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompGpsUbloxMulti::DatosGPS, S>
{
    static void read(S* istr, ::RoboCompGpsUbloxMulti::DatosGPS& v)
    {
        istr->readAll(v.latitude, v.longitude, v.altitude, v.UTMx, v.UTMy, v.mapx, v.mapy, v.azimut, v.rot);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompGpsUbloxMulti
{

using GpsUbloxMultiPtr = ::std::shared_ptr<GpsUbloxMulti>;
using GpsUbloxMultiPrxPtr = ::std::shared_ptr<GpsUbloxMultiPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompGpsUbloxMulti
{

class GpsUbloxMulti;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< GpsUbloxMulti>&);
::IceProxy::Ice::Object* upCast(GpsUbloxMulti*);
/// \endcond

}

}

namespace RoboCompGpsUbloxMulti
{

class GpsUbloxMulti;
/// \cond INTERNAL
::Ice::Object* upCast(GpsUbloxMulti*);
/// \endcond
typedef ::IceInternal::Handle< GpsUbloxMulti> GpsUbloxMultiPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti> GpsUbloxMultiPrx;
typedef GpsUbloxMultiPrx GpsUbloxMultiPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(GpsUbloxMultiPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompGpsUbloxMulti
{

struct DatosGPS
{
    ::Ice::Float latitude;
    ::Ice::Float longitude;
    ::Ice::Float altitude;
    ::Ice::Float UTMx;
    ::Ice::Float UTMy;
    ::Ice::Float mapx;
    ::Ice::Float mapy;
    ::Ice::Float azimut;
    ::Ice::Float rot;
};

}

namespace RoboCompGpsUbloxMulti
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_getData.
 * Create a wrapper instance by calling ::RoboCompGpsUbloxMulti::newCallback_GpsUbloxMulti_getData.
 */
class Callback_GpsUbloxMulti_getData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GpsUbloxMulti_getData_Base> Callback_GpsUbloxMulti_getDataPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_setInitialPose.
 * Create a wrapper instance by calling ::RoboCompGpsUbloxMulti::newCallback_GpsUbloxMulti_setInitialPose.
 */
class Callback_GpsUbloxMulti_setInitialPose_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GpsUbloxMulti_setInitialPose_Base> Callback_GpsUbloxMulti_setInitialPosePtr;

}

namespace IceProxy
{

namespace RoboCompGpsUbloxMulti
{

class GpsUbloxMulti : public virtual ::Ice::Proxy<GpsUbloxMulti, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompGpsUbloxMulti::DatosGPS getData(::Ice::Int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getData(_iceI_begin_getData(robotid, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getData(::Ice::Int robotid, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getData(robotid, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getData(::Ice::Int robotid, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(robotid, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(::Ice::Int robotid, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(robotid, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(::Ice::Int robotid, const ::RoboCompGpsUbloxMulti::Callback_GpsUbloxMulti_getDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(robotid, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getData(::Ice::Int robotid, const ::Ice::Context& context, const ::RoboCompGpsUbloxMulti::Callback_GpsUbloxMulti_getDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getData(robotid, context, cb, cookie);
    }

    ::RoboCompGpsUbloxMulti::DatosGPS end_getData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getData(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setInitialPose(_iceI_begin_setInitialPose(robotid, x, y, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setInitialPose(robotid, x, y, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setInitialPose(robotid, x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setInitialPose(robotid, x, y, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, const ::RoboCompGpsUbloxMulti::Callback_GpsUbloxMulti_setInitialPosePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setInitialPose(robotid, x, y, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, const ::Ice::Context& context, const ::RoboCompGpsUbloxMulti::Callback_GpsUbloxMulti_setInitialPosePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setInitialPose(robotid, x, y, context, cb, cookie);
    }

    void end_setInitialPose(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setInitialPose(::Ice::Int, ::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompGpsUbloxMulti
{

class GpsUbloxMulti : public virtual ::Ice::Object
{
public:

    typedef GpsUbloxMultiPrx ProxyType;
    typedef GpsUbloxMultiPtr PointerType;

    virtual ~GpsUbloxMulti();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual DatosGPS getData(::Ice::Int robotid, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void setInitialPose(::Ice::Int robotid, ::Ice::Float x, ::Ice::Float y, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setInitialPose(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const GpsUbloxMulti& lhs, const GpsUbloxMulti& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const GpsUbloxMulti& lhs, const GpsUbloxMulti& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompGpsUbloxMulti::DatosGPS>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 36;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompGpsUbloxMulti::DatosGPS, S>
{
    static void write(S* ostr, const ::RoboCompGpsUbloxMulti::DatosGPS& v)
    {
        ostr->write(v.latitude);
        ostr->write(v.longitude);
        ostr->write(v.altitude);
        ostr->write(v.UTMx);
        ostr->write(v.UTMy);
        ostr->write(v.mapx);
        ostr->write(v.mapy);
        ostr->write(v.azimut);
        ostr->write(v.rot);
    }
};

template<typename S>
struct StreamReader< ::RoboCompGpsUbloxMulti::DatosGPS, S>
{
    static void read(S* istr, ::RoboCompGpsUbloxMulti::DatosGPS& v)
    {
        istr->read(v.latitude);
        istr->read(v.longitude);
        istr->read(v.altitude);
        istr->read(v.UTMx);
        istr->read(v.UTMy);
        istr->read(v.mapx);
        istr->read(v.mapy);
        istr->read(v.azimut);
        istr->read(v.rot);
    }
};

}
/// \endcond

namespace RoboCompGpsUbloxMulti
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_getData.
 * Create a wrapper instance by calling ::RoboCompGpsUbloxMulti::newCallback_GpsUbloxMulti_getData.
 */
template<class T>
class CallbackNC_GpsUbloxMulti_getData : public Callback_GpsUbloxMulti_getData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const DatosGPS&);

    CallbackNC_GpsUbloxMulti_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GpsUbloxMultiPrx proxy = GpsUbloxMultiPrx::uncheckedCast(result->getProxy());
        DatosGPS ret;
        try
        {
            ret = proxy->end_getData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_getData.
 */
template<class T> Callback_GpsUbloxMulti_getDataPtr
newCallback_GpsUbloxMulti_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const DatosGPS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GpsUbloxMulti_getData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_getData.
 */
template<class T> Callback_GpsUbloxMulti_getDataPtr
newCallback_GpsUbloxMulti_getData(T* instance, void (T::*cb)(const DatosGPS&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GpsUbloxMulti_getData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_getData.
 * Create a wrapper instance by calling ::RoboCompGpsUbloxMulti::newCallback_GpsUbloxMulti_getData.
 */
template<class T, typename CT>
class Callback_GpsUbloxMulti_getData : public Callback_GpsUbloxMulti_getData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const DatosGPS&, const CT&);

    Callback_GpsUbloxMulti_getData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GpsUbloxMultiPrx proxy = GpsUbloxMultiPrx::uncheckedCast(result->getProxy());
        DatosGPS ret;
        try
        {
            ret = proxy->end_getData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_getData.
 */
template<class T, typename CT> Callback_GpsUbloxMulti_getDataPtr
newCallback_GpsUbloxMulti_getData(const IceUtil::Handle<T>& instance, void (T::*cb)(const DatosGPS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GpsUbloxMulti_getData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_getData.
 */
template<class T, typename CT> Callback_GpsUbloxMulti_getDataPtr
newCallback_GpsUbloxMulti_getData(T* instance, void (T::*cb)(const DatosGPS&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GpsUbloxMulti_getData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_setInitialPose.
 * Create a wrapper instance by calling ::RoboCompGpsUbloxMulti::newCallback_GpsUbloxMulti_setInitialPose.
 */
template<class T>
class CallbackNC_GpsUbloxMulti_setInitialPose : public Callback_GpsUbloxMulti_setInitialPose_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GpsUbloxMulti_setInitialPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_setInitialPose.
 */
template<class T> Callback_GpsUbloxMulti_setInitialPosePtr
newCallback_GpsUbloxMulti_setInitialPose(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GpsUbloxMulti_setInitialPose<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_setInitialPose.
 */
template<class T> Callback_GpsUbloxMulti_setInitialPosePtr
newCallback_GpsUbloxMulti_setInitialPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GpsUbloxMulti_setInitialPose<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_setInitialPose.
 */
template<class T> Callback_GpsUbloxMulti_setInitialPosePtr
newCallback_GpsUbloxMulti_setInitialPose(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GpsUbloxMulti_setInitialPose<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_setInitialPose.
 */
template<class T> Callback_GpsUbloxMulti_setInitialPosePtr
newCallback_GpsUbloxMulti_setInitialPose(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GpsUbloxMulti_setInitialPose<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_setInitialPose.
 * Create a wrapper instance by calling ::RoboCompGpsUbloxMulti::newCallback_GpsUbloxMulti_setInitialPose.
 */
template<class T, typename CT>
class Callback_GpsUbloxMulti_setInitialPose : public Callback_GpsUbloxMulti_setInitialPose_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GpsUbloxMulti_setInitialPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_setInitialPose.
 */
template<class T, typename CT> Callback_GpsUbloxMulti_setInitialPosePtr
newCallback_GpsUbloxMulti_setInitialPose(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GpsUbloxMulti_setInitialPose<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_setInitialPose.
 */
template<class T, typename CT> Callback_GpsUbloxMulti_setInitialPosePtr
newCallback_GpsUbloxMulti_setInitialPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GpsUbloxMulti_setInitialPose<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_setInitialPose.
 */
template<class T, typename CT> Callback_GpsUbloxMulti_setInitialPosePtr
newCallback_GpsUbloxMulti_setInitialPose(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GpsUbloxMulti_setInitialPose<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGpsUbloxMulti::GpsUbloxMulti::begin_setInitialPose.
 */
template<class T, typename CT> Callback_GpsUbloxMulti_setInitialPosePtr
newCallback_GpsUbloxMulti_setInitialPose(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GpsUbloxMulti_setInitialPose<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
